{"/home/travis/build/npmtest/node-npmtest-graphql-relay/test.js":"/* istanbul instrument in package npmtest_graphql_relay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graphql-relay/lib.npmtest_graphql_relay.js":"/* istanbul instrument in package npmtest_graphql_relay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_graphql_relay = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_graphql_relay = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-graphql-relay/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-graphql-relay && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_graphql_relay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_graphql_relay\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_graphql_relay.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_graphql_relay.rollup.js'] =\n            local.assetsDict['/assets.npmtest_graphql_relay.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_graphql_relay.__dirname + '/lib.npmtest_graphql_relay.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _connection = require('./connection/connection.js');\n\nObject.defineProperty(exports, 'backwardConnectionArgs', {\n  enumerable: true,\n  get: function get() {\n    return _connection.backwardConnectionArgs;\n  }\n});\nObject.defineProperty(exports, 'connectionArgs', {\n  enumerable: true,\n  get: function get() {\n    return _connection.connectionArgs;\n  }\n});\nObject.defineProperty(exports, 'connectionDefinitions', {\n  enumerable: true,\n  get: function get() {\n    return _connection.connectionDefinitions;\n  }\n});\nObject.defineProperty(exports, 'forwardConnectionArgs', {\n  enumerable: true,\n  get: function get() {\n    return _connection.forwardConnectionArgs;\n  }\n});\n\nvar _arrayconnection = require('./connection/arrayconnection.js');\n\nObject.defineProperty(exports, 'connectionFromArray', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.connectionFromArray;\n  }\n});\nObject.defineProperty(exports, 'connectionFromArraySlice', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.connectionFromArraySlice;\n  }\n});\nObject.defineProperty(exports, 'connectionFromPromisedArray', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.connectionFromPromisedArray;\n  }\n});\nObject.defineProperty(exports, 'connectionFromPromisedArraySlice', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.connectionFromPromisedArraySlice;\n  }\n});\nObject.defineProperty(exports, 'cursorForObjectInConnection', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.cursorForObjectInConnection;\n  }\n});\nObject.defineProperty(exports, 'cursorToOffset', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.cursorToOffset;\n  }\n});\nObject.defineProperty(exports, 'getOffsetWithDefault', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.getOffsetWithDefault;\n  }\n});\nObject.defineProperty(exports, 'offsetToCursor', {\n  enumerable: true,\n  get: function get() {\n    return _arrayconnection.offsetToCursor;\n  }\n});\n\nvar _mutation = require('./mutation/mutation.js');\n\nObject.defineProperty(exports, 'mutationWithClientMutationId', {\n  enumerable: true,\n  get: function get() {\n    return _mutation.mutationWithClientMutationId;\n  }\n});\n\nvar _node = require('./node/node.js');\n\nObject.defineProperty(exports, 'nodeDefinitions', {\n  enumerable: true,\n  get: function get() {\n    return _node.nodeDefinitions;\n  }\n});\n\nvar _plural = require('./node/plural.js');\n\nObject.defineProperty(exports, 'pluralIdentifyingRootField', {\n  enumerable: true,\n  get: function get() {\n    return _plural.pluralIdentifyingRootField;\n  }\n});\nObject.defineProperty(exports, 'fromGlobalId', {\n  enumerable: true,\n  get: function get() {\n    return _node.fromGlobalId;\n  }\n});\nObject.defineProperty(exports, 'globalIdField', {\n  enumerable: true,\n  get: function get() {\n    return _node.globalIdField;\n  }\n});\nObject.defineProperty(exports, 'toGlobalId', {\n  enumerable: true,\n  get: function get() {\n    return _node.toGlobalId;\n  }\n});","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/connection/connection.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectionArgs = exports.backwardConnectionArgs = exports.forwardConnectionArgs = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexports.connectionDefinitions = connectionDefinitions;\n\nvar _graphql = require('graphql');\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with forward pagination.\n */\nvar forwardConnectionArgs = exports.forwardConnectionArgs = {\n  after: {\n    type: _graphql.GraphQLString\n  },\n  first: {\n    type: _graphql.GraphQLInt\n  }\n};\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with backward pagination.\n */\nvar backwardConnectionArgs = exports.backwardConnectionArgs = {\n  before: {\n    type: _graphql.GraphQLString\n  },\n  last: {\n    type: _graphql.GraphQLInt\n  }\n};\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with bidirectional pagination.\n */\nvar connectionArgs = exports.connectionArgs = _extends({}, forwardConnectionArgs, backwardConnectionArgs);\n\nfunction resolveMaybeThunk(thingOrThunk) {\n  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;\n}\n\n/**\n * Returns a GraphQLObjectType for a connection with the given name,\n * and whose nodes are of the specified type.\n */\nfunction connectionDefinitions(config) {\n  var nodeType = config.nodeType;\n\n  var name = config.name || nodeType.name;\n  var edgeFields = config.edgeFields || {};\n  var connectionFields = config.connectionFields || {};\n  var resolveNode = config.resolveNode;\n  var resolveCursor = config.resolveCursor;\n  var edgeType = new _graphql.GraphQLObjectType({\n    name: name + 'Edge',\n    description: 'An edge in a connection.',\n    fields: function fields() {\n      return _extends({\n        node: {\n          type: nodeType,\n          resolve: resolveNode,\n          description: 'The item at the end of the edge'\n        },\n        cursor: {\n          type: new _graphql.GraphQLNonNull(_graphql.GraphQLString),\n          resolve: resolveCursor,\n          description: 'A cursor for use in pagination'\n        }\n      }, resolveMaybeThunk(edgeFields));\n    }\n  });\n\n  var connectionType = new _graphql.GraphQLObjectType({\n    name: name + 'Connection',\n    description: 'A connection to a list of items.',\n    fields: function fields() {\n      return _extends({\n        pageInfo: {\n          type: new _graphql.GraphQLNonNull(pageInfoType),\n          description: 'Information to aid in pagination.'\n        },\n        edges: {\n          type: new _graphql.GraphQLList(edgeType),\n          description: 'A list of edges.'\n        }\n      }, resolveMaybeThunk(connectionFields));\n    }\n  });\n\n  return { edgeType: edgeType, connectionType: connectionType };\n}\n\n/**\n * The common page info type used by all connections.\n */\nvar pageInfoType = new _graphql.GraphQLObjectType({\n  name: 'PageInfo',\n  description: 'Information about pagination in a connection.',\n  fields: function fields() {\n    return {\n      hasNextPage: {\n        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),\n        description: 'When paginating forwards, are there more items?'\n      },\n      hasPreviousPage: {\n        type: new _graphql.GraphQLNonNull(_graphql.GraphQLBoolean),\n        description: 'When paginating backwards, are there more items?'\n      },\n      startCursor: {\n        type: _graphql.GraphQLString,\n        description: 'When paginating backwards, the cursor to continue.'\n      },\n      endCursor: {\n        type: _graphql.GraphQLString,\n        description: 'When paginating forwards, the cursor to continue.'\n      }\n    };\n  }\n});","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/connection/arrayconnection.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.connectionFromArray = connectionFromArray;\nexports.connectionFromPromisedArray = connectionFromPromisedArray;\nexports.connectionFromArraySlice = connectionFromArraySlice;\nexports.connectionFromPromisedArraySlice = connectionFromPromisedArraySlice;\nexports.offsetToCursor = offsetToCursor;\nexports.cursorToOffset = cursorToOffset;\nexports.cursorForObjectInConnection = cursorForObjectInConnection;\nexports.getOffsetWithDefault = getOffsetWithDefault;\n\nvar _base = require('../utils/base64.js');\n\n/**\n * A simple function that accepts an array and connection arguments, and returns\n * a connection object for use in GraphQL. It uses array offsets as pagination,\n * so pagination will only work if the array is static.\n */\n\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction connectionFromArray(data, args) {\n  return connectionFromArraySlice(data, args, {\n    sliceStart: 0,\n    arrayLength: data.length\n  });\n}\n\n/**\n * A version of `connectionFromArray` that takes a promised array, and returns a\n * promised connection.\n */\nfunction connectionFromPromisedArray(dataPromise, args) {\n  return dataPromise.then(function (data) {\n    return connectionFromArray(data, args);\n  });\n}\n\n/**\n * Given a slice (subset) of an array, returns a connection object for use in\n * GraphQL.\n *\n * This function is similar to `connectionFromArray`, but is intended for use\n * cases where you know the cardinality of the connection, consider it too large\n * to materialize the entire array, and instead wish pass in a slice of the\n * total result large enough to cover the range specified in `args`.\n */\nfunction connectionFromArraySlice(arraySlice, args, meta) {\n  var after = args.after,\n      before = args.before,\n      first = args.first,\n      last = args.last;\n  var sliceStart = meta.sliceStart,\n      arrayLength = meta.arrayLength;\n\n  var sliceEnd = sliceStart + arraySlice.length;\n  var beforeOffset = getOffsetWithDefault(before, arrayLength);\n  var afterOffset = getOffsetWithDefault(after, -1);\n\n  var startOffset = Math.max(sliceStart - 1, afterOffset, -1) + 1;\n  var endOffset = Math.min(sliceEnd, beforeOffset, arrayLength);\n  if (typeof first === 'number') {\n    if (first < 0) {\n      throw new Error('Argument \"first\" must be a non-negative integer');\n    }\n\n    endOffset = Math.min(endOffset, startOffset + first);\n  }\n  if (typeof last === 'number') {\n    if (last < 0) {\n      throw new Error('Argument \"last\" must be a non-negative integer');\n    }\n\n    startOffset = Math.max(startOffset, endOffset - last);\n  }\n\n  // If supplied slice is too large, trim it down before mapping over it.\n  var slice = arraySlice.slice(Math.max(startOffset - sliceStart, 0), arraySlice.length - (sliceEnd - endOffset));\n\n  var edges = slice.map(function (value, index) {\n    return {\n      cursor: offsetToCursor(startOffset + index),\n      node: value\n    };\n  });\n\n  var firstEdge = edges[0];\n  var lastEdge = edges[edges.length - 1];\n  var lowerBound = after ? afterOffset + 1 : 0;\n  var upperBound = before ? beforeOffset : arrayLength;\n  return {\n    edges: edges,\n    pageInfo: {\n      startCursor: firstEdge ? firstEdge.cursor : null,\n      endCursor: lastEdge ? lastEdge.cursor : null,\n      hasPreviousPage: typeof last === 'number' ? startOffset > lowerBound : false,\n      hasNextPage: typeof first === 'number' ? endOffset < upperBound : false\n    }\n  };\n}\n\n/**\n * A version of `connectionFromArraySlice` that takes a promised array slice,\n * and returns a promised connection.\n */\nfunction connectionFromPromisedArraySlice(dataPromise, args, arrayInfo) {\n  return dataPromise.then(function (data) {\n    return connectionFromArraySlice(data, args, arrayInfo);\n  });\n}\n\nvar PREFIX = 'arrayconnection:';\n\n/**\n * Creates the cursor string from an offset.\n */\nfunction offsetToCursor(offset) {\n  return (0, _base.base64)(PREFIX + offset);\n}\n\n/**\n * Rederives the offset from the cursor string.\n */\nfunction cursorToOffset(cursor) {\n  return parseInt((0, _base.unbase64)(cursor).substring(PREFIX.length), 10);\n}\n\n/**\n * Return the cursor associated with an object in an array.\n */\nfunction cursorForObjectInConnection(data, object) {\n  var offset = data.indexOf(object);\n  if (offset === -1) {\n    return null;\n  }\n  return offsetToCursor(offset);\n}\n\n/**\n * Given an optional cursor and a default offset, returns the offset\n * to use; if the cursor contains a valid offset, that will be used,\n * otherwise it will be the default.\n */\nfunction getOffsetWithDefault(cursor, defaultOffset) {\n  if (typeof cursor !== 'string') {\n    return defaultOffset;\n  }\n  var offset = cursorToOffset(cursor);\n  return isNaN(offset) ? defaultOffset : offset;\n}","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/utils/base64.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.base64 = base64;\nexports.unbase64 = unbase64;\nfunction base64(i) {\n  return new Buffer(i, 'utf8').toString('base64');\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction unbase64(i) {\n  return new Buffer(i, 'base64').toString('utf8');\n}","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/mutation/mutation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nexports.mutationWithClientMutationId = mutationWithClientMutationId;\n\nvar _graphql = require('graphql');\n\nfunction resolveMaybeThunk(thingOrThunk) {\n  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;\n}\n\n/**\n * A description of a mutation consumable by mutationWithClientMutationId\n * to create a GraphQLFieldConfig for that mutation.\n *\n * The inputFields and outputFields should not include `clientMutationId`,\n * as this will be provided automatically.\n *\n * An input object will be created containing the input fields, and an\n * object will be created containing the output fields.\n *\n * mutateAndGetPayload will receieve an Object with a key for each\n * input field, and it should return an Object with a key for each\n * output field. It may return synchronously, or return a Promise.\n */\n\n\n/**\n * Returns a GraphQLFieldConfig for the mutation described by the\n * provided MutationConfig.\n */\nfunction mutationWithClientMutationId(config) {\n  var name = config.name,\n      description = config.description,\n      deprecationReason = config.deprecationReason,\n      inputFields = config.inputFields,\n      outputFields = config.outputFields,\n      mutateAndGetPayload = config.mutateAndGetPayload;\n\n  var augmentedInputFields = function augmentedInputFields() {\n    return _extends({}, resolveMaybeThunk(inputFields), {\n      clientMutationId: {\n        type: _graphql.GraphQLString\n      }\n    });\n  };\n  var augmentedOutputFields = function augmentedOutputFields() {\n    return _extends({}, resolveMaybeThunk(outputFields), {\n      clientMutationId: {\n        type: _graphql.GraphQLString\n      }\n    });\n  };\n\n  var outputType = new _graphql.GraphQLObjectType({\n    name: name + 'Payload',\n    fields: augmentedOutputFields\n  });\n\n  var inputType = new _graphql.GraphQLInputObjectType({\n    name: name + 'Input',\n    fields: augmentedInputFields\n  });\n\n  return {\n    type: outputType,\n    description: description,\n    deprecationReason: deprecationReason,\n    args: {\n      input: { type: new _graphql.GraphQLNonNull(inputType) }\n    },\n    resolve: function resolve(_, _ref, context, info) {\n      var input = _ref.input;\n\n      return Promise.resolve(mutateAndGetPayload(input, context, info)).then(function (payload) {\n        payload.clientMutationId = input.clientMutationId;\n        return payload;\n      });\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/node/node.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nodeDefinitions = nodeDefinitions;\nexports.toGlobalId = toGlobalId;\nexports.fromGlobalId = fromGlobalId;\nexports.globalIdField = globalIdField;\n\nvar _graphql = require('graphql');\n\nvar _base = require('../utils/base64.js');\n\n/**\n * Given a function to map from an ID to an underlying object, and a function\n * to map from an underlying object to the concrete GraphQLObjectType it\n * corresponds to, constructs a `Node` interface that objects can implement,\n * and a field config for a `node` root field.\n *\n * If the typeResolver is omitted, object resolution on the interface will be\n * handled with the `isTypeOf` method on object types, as with any GraphQL\n * interface without a provided `resolveType` method.\n */\n\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\nfunction nodeDefinitions(idFetcher, typeResolver) {\n  var nodeInterface = new _graphql.GraphQLInterfaceType({\n    name: 'Node',\n    description: 'An object with an ID',\n    fields: function fields() {\n      return {\n        id: {\n          type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),\n          description: 'The id of the object.'\n        }\n      };\n    },\n    resolveType: typeResolver\n  });\n\n  var nodeField = {\n    name: 'node',\n    description: 'Fetches an object given its ID',\n    type: nodeInterface,\n    args: {\n      id: {\n        type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),\n        description: 'The ID of an object'\n      }\n    },\n    resolve: function resolve(obj, _ref, context, info) {\n      var id = _ref.id;\n      return idFetcher(id, context, info);\n    }\n  };\n\n  var nodesField = {\n    name: 'nodes',\n    description: 'Fetches objects given their IDs',\n    type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(nodeInterface)),\n    args: {\n      ids: {\n        type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(_graphql.GraphQLID))),\n        description: 'The IDs of objects'\n      }\n    },\n    resolve: function resolve(obj, _ref2, context, info) {\n      var ids = _ref2.ids;\n      return Promise.all(ids.map(function (id) {\n        return Promise.resolve(idFetcher(id, context, info));\n      }));\n    }\n  };\n\n  return { nodeInterface: nodeInterface, nodeField: nodeField, nodesField: nodesField };\n}\n\n/**\n * Takes a type name and an ID specific to that type name, and returns a\n * \"global ID\" that is unique among all types.\n */\nfunction toGlobalId(type, id) {\n  return (0, _base.base64)([type, id].join(':'));\n}\n\n/**\n * Takes the \"global ID\" created by toGlobalID, and returns the type name and ID\n * used to create it.\n */\nfunction fromGlobalId(globalId) {\n  var unbasedGlobalId = (0, _base.unbase64)(globalId);\n  var delimiterPos = unbasedGlobalId.indexOf(':');\n  return {\n    type: unbasedGlobalId.substring(0, delimiterPos),\n    id: unbasedGlobalId.substring(delimiterPos + 1)\n  };\n}\n\n/**\n * Creates the configuration for an id field on a node, using `toGlobalId` to\n * construct the ID from the provided typename. The type-specific ID is fetched\n * by calling idFetcher on the object, or if not provided, by accessing the `id`\n * property on the object.\n */\nfunction globalIdField(typeName, idFetcher) {\n  return {\n    name: 'id',\n    description: 'The ID of an object',\n    type: new _graphql.GraphQLNonNull(_graphql.GraphQLID),\n    resolve: function resolve(obj, args, context, info) {\n      return toGlobalId(typeName || info.parentType.name, idFetcher ? idFetcher(obj, context, info) : obj.id);\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/node/plural.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pluralIdentifyingRootField = pluralIdentifyingRootField;\n\nvar _graphql = require('graphql');\n\nfunction pluralIdentifyingRootField(config) {\n  var inputArgs = {};\n  var inputType = config.inputType;\n  if (inputType instanceof _graphql.GraphQLNonNull) {\n    inputType = inputType.ofType;\n  }\n  inputArgs[config.argName] = {\n    type: new _graphql.GraphQLNonNull(new _graphql.GraphQLList(new _graphql.GraphQLNonNull(inputType)))\n  };\n  return {\n    description: config.description,\n    type: new _graphql.GraphQLList(config.outputType),\n    args: inputArgs,\n    resolve: function resolve(obj, args, context, info) {\n      var inputs = args[config.argName];\n      return Promise.all(inputs.map(function (input) {\n        return Promise.resolve(config.resolveSingleInput(input, context, info));\n      }));\n    }\n  };\n}\n/**\n *  Copyright (c) 2015, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */","/home/travis/build/npmtest/node-npmtest-graphql-relay/node_modules/graphql-relay/lib/connection/connectiontypes.js":"\"use strict\";"}